// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AST challenge test Take the input and output below, and make a function that can generate this code using babel AST: 1`] = `
"export interface UsePoolsQuery<TData> extends ReactQueryParams<QueryPoolsResponse, TData> {
  request: QueryPoolsRequest;
}

const usePools = <TData = QueryPoolsResponse,>({
  request: request,
  options: options
}: UsePoolsQuery<TData>) => {
  return useQuery<QueryPoolsResponse, Error, TData>([\\"poolsQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.pools(request);
  }, options);
};"
`;

exports[`AST challenge test should generate the hook correctly 1`] = `"interface UsePoolsQuery {}"`;

exports[`AST challenge test test example-methods.json 1`] = `
"export interface UsePoolsQuery<TData> extends ReactQueryParams<QueryPoolsResponse, TData> {
  request: QueryPoolsRequest;
}

const usePools = <TData = QueryPoolsResponse,>({
  request: request,
  options: options
}: UsePoolsQuery<TData>) => {
  return useQuery<QueryPoolsResponse, Error, TData>([\\"poolsQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.pools(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 2`] = `
"export interface UseNumPoolsQuery<TData> extends ReactQueryParams<QueryNumPoolsResponse, TData> {
  request: QueryNumPoolsRequest;
}

const useNumPools = <TData = QueryNumPoolsResponse,>({
  request: request,
  options: options
}: UseNumPoolsQuery<TData>) => {
  return useQuery<QueryNumPoolsResponse, Error, TData>([\\"numpoolsQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.numpools(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 3`] = `
"export interface UseTotalLiquidityQuery<TData> extends ReactQueryParams<QueryTotalLiquidityResponse, TData> {
  request: QueryTotalLiquidityRequest;
}

const useTotalLiquidity = <TData = QueryTotalLiquidityResponse,>({
  request: request,
  options: options
}: UseTotalLiquidityQuery<TData>) => {
  return useQuery<QueryTotalLiquidityResponse, Error, TData>([\\"totalliquidityQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.totalliquidity(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 4`] = `
"export interface UsePoolQuery<TData> extends ReactQueryParams<QueryPoolResponse, TData> {
  request: QueryPoolRequest;
}

const usePool = <TData = QueryPoolResponse,>({
  request: request,
  options: options
}: UsePoolQuery<TData>) => {
  return useQuery<QueryPoolResponse, Error, TData>([\\"poolQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.pool(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 5`] = `
"export interface UsePoolParamsQuery<TData> extends ReactQueryParams<QueryPoolParamsResponse, TData> {
  request: QueryPoolParamsRequest;
}

const usePoolParams = <TData = QueryPoolParamsResponse,>({
  request: request,
  options: options
}: UsePoolParamsQuery<TData>) => {
  return useQuery<QueryPoolParamsResponse, Error, TData>([\\"poolparamsQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.poolparams(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 6`] = `
"export interface UseTotalPoolLiquidityQuery<TData> extends ReactQueryParams<QueryTotalPoolLiquidityResponse, TData> {
  request: QueryTotalPoolLiquidityRequest;
}

const useTotalPoolLiquidity = <TData = QueryTotalPoolLiquidityResponse,>({
  request: request,
  options: options
}: UseTotalPoolLiquidityQuery<TData>) => {
  return useQuery<QueryTotalPoolLiquidityResponse, Error, TData>([\\"totalpoolliquidityQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.totalpoolliquidity(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 7`] = `
"export interface UseTotalSharesQuery<TData> extends ReactQueryParams<QueryTotalSharesResponse, TData> {
  request: QueryTotalSharesRequest;
}

const useTotalShares = <TData = QueryTotalSharesResponse,>({
  request: request,
  options: options
}: UseTotalSharesQuery<TData>) => {
  return useQuery<QueryTotalSharesResponse, Error, TData>([\\"totalsharesQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.totalshares(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 8`] = `
"export interface UseSpotPriceQuery<TData> extends ReactQueryParams<QuerySpotPriceResponse, TData> {
  request: QuerySpotPriceRequest;
}

const useSpotPrice = <TData = QuerySpotPriceResponse,>({
  request: request,
  options: options
}: UseSpotPriceQuery<TData>) => {
  return useQuery<QuerySpotPriceResponse, Error, TData>([\\"spotpriceQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.spotprice(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 9`] = `
"export interface UseEstimateSwapExactAmountInQuery<TData> extends ReactQueryParams<QuerySwapExactAmountInResponse, TData> {
  request: QuerySwapExactAmountInRequest;
}

const useEstimateSwapExactAmountIn = <TData = QuerySwapExactAmountInResponse,>({
  request: request,
  options: options
}: UseEstimateSwapExactAmountInQuery<TData>) => {
  return useQuery<QuerySwapExactAmountInResponse, Error, TData>([\\"estimateswapexactamountinQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.estimateswapexactamountin(request);
  }, options);
};"
`;

exports[`AST challenge test test example-methods.json 10`] = `
"export interface UseEstimateSwapExactAmountOutQuery<TData> extends ReactQueryParams<QuerySwapExactAmountOutResponse, TData> {
  request: QuerySwapExactAmountOutRequest;
}

const useEstimateSwapExactAmountOut = <TData = QuerySwapExactAmountOutResponse,>({
  request: request,
  options: options
}: UseEstimateSwapExactAmountOutQuery<TData>) => {
  return useQuery<QuerySwapExactAmountOutResponse, Error, TData>([\\"estimateswapexactamountoutQuery\\", request], () => {
    if (!queryService) throw new Error(\\"Query Service not initialized\\");
    return queryService.estimateswapexactamountout(request);
  }, options);
};"
`;
